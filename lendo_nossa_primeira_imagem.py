# -*- coding: utf-8 -*-
"""lendo nossa primeira imagem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-dbNrVhHkTCqYOHr9B-_oH_flXVB8Ear
"""

#! semelhante ao terminal

!pip install gdal
!pip install rasterio
!pip install spectral

"""# TIFFFILE

"""

#biblioteca nativa do collab
import tifffile as tif
import matplotlib.pyplot as plt
from spectral import imshow

img = tif.imread("/content/L71221071_07120010720_DN.tif")

#Linhas, colunas e bandas
img.shape

#para visualizar uma banda, já vem com a cor definida
plt.imshow(img[ :,:, 3],cmap='Greys_r')

imshow(img, bands=(2,3,0))

"""#GDAL"""

from osgeo import gdal
import numpy as np

img2 = gdal.Open('/content/L71221071_07120010720_DN.tif')

img3 = img2.ReadAsArray()

#as bandas aparecem no começo
img3.shape

#inverter para ficar igual o TIFFFLE (troca de dimenções)
img3 = img3.swapaxes(0,1)

img3.shape

#é invertido do TIFFFLE
imshow(img3[:,:,3])

#parametro bands nem precisa colocar explicito o nome bands(só abrir uma tupla)
imshow(img3, (2,3,1))

#outra forma de transformar em numpy array (inicia do 1)
b1 = img2.GetRasterBand(1).ReadAsArray()
b2 = img2.GetRasterBand(2).ReadAsArray()
b4 = img2.GetRasterBand(4).ReadAsArray()

#empilhamento
stack = np.dstack([b1,b2,b4])

stack.shape

#porque tem 3 bandas apenas
imshow(stack, (1,2,0))

"""#RASTERIO"""

import rasterio as rst
from rasterio.plot import show

rst = rasterio.open('/content/L71221071_07120010720_DN.tif')

print(rst)

# tem coordenadas dos pixels
show(rst, cmap='Greys_r')

#mesma logica não começa do 0
b1 = rst.read(1)
b2 = rst.read(2)
b4 = rst.read(4)

stack = np.dstack([b1,b2,b4])

#fecha a memoria
with rasterio.open('/content/L71221071_07120010720_DN.tif') as rst:
  b1 = rst.read(1)
  b2 = rst.read(2)
  b4 = rst.read(4)

stack2 = np.dstack([b1,b2,b4])

imshow(stack2, (1,2,0))